name: Build and Release

on:
  push:
    paths:
      - .github/workflows/build-and-release.yml
      - amalgam.cpp
      - LICENSE.txt
      - THIRD_PARTY_LICENSES.txt

  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Compile with clang++
        run: clang++ -std=c++17 -fno-exceptions -fno-rtti -static -O3 -o textunpack amalgam.cpp

      - name: Archive Linux binary
        run: zip textunpack-linux.zip textunpack sample.txt LICENSE.txt THIRD_PARTY_LICENSES.txt

      - name: Upload Linux Binary
        uses: actions/upload-artifact@v4
        with:
          name: textunpack-linux
          path: textunpack-linux.zip

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Configure git
        shell: cmd
        run: |
          git config --global core.eol lf
          git config --global core.autocrlf false

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Compile with cl
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cl /EHs-c- /GR- /GS- /sdl- /MT /utf-8 /O2 /std:c++17 amalgam.cpp /Fe:textunpack.exe

      - name: Archive Windows binary
        shell: powershell
        run: Compress-Archive -Path textunpack.exe,sample.txt,LICENSE.txt,THIRD_PARTY_LICENSES.txt -DestinationPath textunpack-windows.zip

      - name: Upload Windows Binary
        uses: actions/upload-artifact@v4
        with:
          name: textunpack-windows
          path: textunpack-windows.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt install -y gh

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: textunpack-linux
          path: ./dist

      - name: Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: textunpack-windows
          path: ./dist

      - name: Set release metadata
        id: meta
        run: |
          echo "RELEASE_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "TAG_NAME=build-$(date +'%Y-%m-%d')-${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Create GitHub release using gh
        run: |
          gh release create "$TAG_NAME" ./dist/textunpack-linux.zip ./dist/textunpack-windows.zip \
            --title "Build $RELEASE_DATE" \
            --notes "Automated release from commit $SHORT_SHA." \
            --target $GITHUB_SHA
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
